{"version":3,"sources":["_init.sf","Connection/Extension.sf","Connection/HTTP.sf","Connection/WebSocket.sf","Events/Blocks.sf"],"names":["window","templates","_$_","sf","dom","$","__tmplt","_sf_internal","body_map","_replace","h","html","this","path","remove","reinitViews","append","prepend","imports","task","Blackprint","loadScope","url","Context","getContext"],"mappings":"qVAEAA,EAAAC,YAAAD,EAAAC,UAAA,IAAA,IAAAC,EAAAC,GAAAC,KAAAD,GAAAE,EAAAC,EAAAN,EAAAC,UAAAD,EAAAO,aAAAP,EAAAO,cAAA,CAAAC,SAAAA,GAAAC,SAAAA,EAAAA,GAAA,IAAAC,EAAAR,EAAAS,GAAA,OAAAC,KAAAJ,SAAAK,IAAAD,KAAAJ,SAAAK,GAAAC,SAAAF,KAAAG,aAAAH,KAAAG,YAAAL,GAAAE,KAAAJ,SAAAK,GAAAH,GAAAM,OAAAA,EAAAA,GAAAd,EAAAA,SAAAA,MAAAA,OAAAA,KAAAA,SAAAA,MAAAA,KAAAA,aAAAe,QAAAA,EAAAA,GAAAf,EAAAA,SAAAA,MAAAA,QAAAA,KAAAA,SAAAA,MAAAA,KAAAA,oBAYAgB,EAAAC,OAKA,IAAAC,QAAApB,EAAAoB,WAAAC,UAAA,CAGAC,IAAAA,OAAAA,KAAAA,MAOAC,GAHApB,GAAAE,QAGAe,EAAAI,WAAA,skBCGAJ,EAAAA,OAAAA,kBAAAA,wCACAG,EAAAA,MAAAA,+kBCDAH,EAAAA,OAAAA,kBAAAA,mCACAG,EAAAA,MAAAA,+kBCDAH,EAAAA,OAAAA,kBAAAA,wCACAG,EAAAA,MAAAA,4iBCFAH,EAAAA,OAAAA,kBAAAA,iCACAG,EAAAA,MAAAA","sourcesContent":[".js will run first before .sf\n\n## js-global\n// This script will run first, and then the other .sf files\n// depends on blackprint.config.js configuration\n\n// Prepare stuff when the page is loading\n// maybe like loading our dependencies for the nodes\n\n/* If you have loaded any dependency from ./init.js can also wait from here\n * Warning: When using this, you must modify wrapped:'mjs' to wrapped:'async-mjs'\n * on blackprint.config.js, to avoid circular waiting (because this module also waiting)\n *\n * Info: imports.task() == sf.loader.task;\n */\nawait imports.task();\n\n\n// Because .js and .sf is separated\n// we also need to call LoadScope just like _init.js\nlet Blackprint = await window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n});\n\n// Use sQuery\nlet $ = sf.$;\n\n// Global shared context (wait it to avoid race condition)\nlet Context = await Blackprint.getContext('Polkadot.js');","## html\n<div class=\"node\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n    <input type=\"text\" sf-bind=\"data.dAppName\" placeholder=\"Your dApp Name\">\n\n    <div class=\"left-port\">\n      <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n    </div>\n    <div class=\"right-port\">\n      <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n\n## scss-global\nbpic-polkadot-js-connection-extension {\n  input {\n    margin: 1px 0 5px 5px;\n    display: block;\n    width: calc(100% - 7%);\n  }\n}\n\n\n## js-global\n// Context = shared object between ../_init.js and ../_init.sf\n\nBlackprint.Sketch.registerInterface('BPIC/Polkadot.js/Connection/Extension',\nContext.IFace.ConnectionExtension);","## html\n<div class=\"node trigger\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n    <input type=\"text\" sf-bind=\"data.rpcURL\" placeholder=\"Type RPC URL here\">\n\n    <div class=\"left-port\">\n      <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n    </div>\n    <div class=\"right-port\">\n      <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n\n## scss-global\nbpic-polkadot-js-connection-http {\n  input {\n    margin: 1px 0 5px 5px;\n    display: block;\n    width: calc(100% - 7%);\n  }\n}\n\n\n## js-global\n// Context = shared object between ../_init.js and ../_init.sf\n\nBlackprint.Sketch.registerInterface('BPIC/Polkadot.js/Connection/HTTP',\nContext.IFace.ConnectionHTTP);","## html\n<div class=\"node trigger\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n    <input type=\"text\" sf-bind=\"data.rpcURL\" placeholder=\"Type RPC URL here\">\n\n    <div class=\"left-port\">\n      <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n    </div>\n    <div class=\"right-port\">\n      <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n\n## scss-global\nbpic-polkadot-js-connection-websocket {\n  input {\n    margin: 1px 0 5px 5px;\n    display: block;\n    width: calc(100% - 7%);\n  }\n}\n\n\n## js-global\n// Context = shared object between ../_init.js and ../_init.sf\n\nBlackprint.Sketch.registerInterface('BPIC/Polkadot.js/Connection/WebSocket',\nContext.IFace.ConnectionWebSocket);","## html\n<div class=\"node event\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n    <div class=\"block-number\">{{ number }}</div>\n\n    <div class=\"left-port\">\n      <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n    </div>\n    <div class=\"right-port\">\n      <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n## scss-global\nbpic-polkadot-js-events-blocks {\n  .block-number {\n    margin: 1px 0 5px 5px;\n    display: block;\n    text-align: center;\n    width: calc(100% - 7%);\n  }\n}\n\n## js-global\n// Context = shared object between ../_init.js and ../_init.sf\n\nBlackprint.Sketch.registerInterface('BPIC/Polkadot.js/Events/Blocks',\nContext.IFace.EventsBlocks);"]}